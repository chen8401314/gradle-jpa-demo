/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.DefaultSchema;
import com.example.demo.jooq.Indexes;
import com.example.demo.jooq.Keys;
import com.example.demo.jooq.tables.records.PfTestTRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PfTestT extends TableImpl<PfTestTRecord> {

    private static final long serialVersionUID = -487212101;

    /**
     * The reference instance of <code>PF_TEST_T</code>
     */
    public static final PfTestT PF_TEST_T = new PfTestT();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PfTestTRecord> getRecordType() {
        return PfTestTRecord.class;
    }

    /**
     * The column <code>PF_TEST_T.ID</code>. 主键ID
     */
    public final TableField<PfTestTRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "主键ID");

    /**
     * The column <code>PF_TEST_T.AGE</code>. 年龄
     */
    public final TableField<PfTestTRecord, Integer> AGE = createField(DSL.name("AGE"), org.jooq.impl.SQLDataType.INTEGER, this, "年龄");

    /**
     * The column <code>PF_TEST_T.NAME</code>. 名字
     */
    public final TableField<PfTestTRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "名字");

    /**
     * Create a <code>PF_TEST_T</code> table reference
     */
    public PfTestT() {
        this(DSL.name("PF_TEST_T"), null);
    }

    /**
     * Create an aliased <code>PF_TEST_T</code> table reference
     */
    public PfTestT(String alias) {
        this(DSL.name(alias), PF_TEST_T);
    }

    /**
     * Create an aliased <code>PF_TEST_T</code> table reference
     */
    public PfTestT(Name alias) {
        this(alias, PF_TEST_T);
    }

    private PfTestT(Name alias, Table<PfTestTRecord> aliased) {
        this(alias, aliased, null);
    }

    private PfTestT(Name alias, Table<PfTestTRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PfTestT(Table<O> child, ForeignKey<O, PfTestTRecord> key) {
        super(child, key, PF_TEST_T);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    @Override
    public UniqueKey<PfTestTRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<UniqueKey<PfTestTRecord>> getKeys() {
        return Arrays.<UniqueKey<PfTestTRecord>>asList(Keys.CONSTRAINT_F);
    }

    @Override
    public PfTestT as(String alias) {
        return new PfTestT(DSL.name(alias), this);
    }

    @Override
    public PfTestT as(Name alias) {
        return new PfTestT(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PfTestT rename(String name) {
        return new PfTestT(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PfTestT rename(Name name) {
        return new PfTestT(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
