/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables.records;


import com.example.demo.jooq.tables.PfTestT;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PfTestTRecord extends UpdatableRecordImpl<PfTestTRecord> implements Record3<String, Integer, String> {

    private static final long serialVersionUID = -1478026212;

    /**
     * Setter for <code>PF_TEST_T.ID</code>. 主键ID
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PF_TEST_T.ID</code>. 主键ID
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PF_TEST_T.AGE</code>. 年龄
     */
    public void setAge(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>PF_TEST_T.AGE</code>. 年龄
     */
    public Integer getAge() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>PF_TEST_T.NAME</code>. 名字
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PF_TEST_T.NAME</code>. 名字
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return PfTestT.PF_TEST_T.ID;
    }

    @Override
    public Field<Integer> field2() {
        return PfTestT.PF_TEST_T.AGE;
    }

    @Override
    public Field<String> field3() {
        return PfTestT.PF_TEST_T.NAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAge();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAge();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public PfTestTRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public PfTestTRecord value2(Integer value) {
        setAge(value);
        return this;
    }

    @Override
    public PfTestTRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public PfTestTRecord values(String value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PfTestTRecord
     */
    public PfTestTRecord() {
        super(PfTestT.PF_TEST_T);
    }

    /**
     * Create a detached, initialised PfTestTRecord
     */
    public PfTestTRecord(String id, Integer age, String name) {
        super(PfTestT.PF_TEST_T);

        set(0, id);
        set(1, age);
        set(2, name);
    }
}
